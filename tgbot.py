import random

from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from db_words import DataBase

from settings import bot_token

print("Start telegram bot...")

state_storage = StateMemoryStorage()
bot = TeleBot(bot_token, state_storage=state_storage)
db = DataBase()

buttons = []


def show_hint(*lines):
    return "\n".join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


def build_markup(texts):
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for t in texts:
        markup.add(types.KeyboardButton(t))
    return markup


class Command:
    ADD_WORD = "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï"
    DELETE_WORD = "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô"
    NEXT = "–î–∞–ª—å—à–µ ‚è≠"

HELP_TEXT = """
–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:

1. –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
2. –í—ã–±–∏—Ä–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:
   - ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –±–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç "–î–∞–ª—å—à–µ ‚è≠".
   - ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –±–æ—Ç –æ—Ç–º–µ—á–∞–µ—Ç –∫—Ä–µ—Å—Ç–∏–∫–æ–º –∏ –¥–∞–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.
3. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞ –∏ —Å–∫—Ä—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è —Å–µ–±—è.

–ö–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏:

/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/cards - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ —Å–ª–æ–≤–∞–º–∏
–î–∞–ª—å—à–µ ‚è≠ - –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô - —Å–∫—Ä—ã—Ç—å —Å–ª–æ–≤–æ –¥–ª—è —Å–µ–±—è
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
"""


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()
    adding_word = State()
    adding_translation = State()


@bot.message_handler(commands=["cards", "start"])
def create_cards(message):
    user_id, is_new = db.get_or_create_user(message.from_user.id)
    if is_new:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. "
            "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ."
            "–î–ª—è –≤—ã–∑–æ–≤–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /help",
        )

    word = db.get_random_word(user_id=user_id)
    target_word = word.target_word
    translate = word.translate_word
    others = db.get_random_words(exclude_word=target_word, limit=3)
    options = [target_word] + others
    random.shuffle(options)
    btn_texts = options + [Command.NEXT, Command.ADD_WORD, Command.DELETE_WORD]
    markup = build_markup(btn_texts)

    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["target_word"] = target_word
        data["translate_word"] = translate
        data["buttons"] = btn_texts
    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, HELP_TEXT)


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data.get("target_word")

        if not target_word:
            bot.send_message(
                message.chat.id,
                "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏ '–î–∞–ª—å—à–µ ‚è≠'",
            )
            return

        user_id = message.from_user.id
        delete = db.delete_user_word(user_id, target_word)

        if delete:
            bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{target_word}' —É–¥–∞–ª–µ–Ω–æ!")
        else:
            bot.send_message(message.chat.id, "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å")


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    bot.set_state(message.from_user.id, MyStates.adding_word, message.chat.id)
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")


@bot.message_handler(state=MyStates.adding_word)
def get_english_word(message):
    bot.set_state(message.from_user.id, MyStates.adding_translation, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data["new_target_word"] = message.text
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:")


@bot.message_handler(state=MyStates.adding_translation)
def get_translation(message):
    user_id = message.from_user.id
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data["new_target_word"]
        translate_word = message.text

    db.add_user_word(user_id, target_word, translate_word)
    bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{target_word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    bot.delete_state(user_id, message.chat.id)


@bot.message_handler(func=lambda message: True, content_types=["text"])
def message_reply(message):
    text = message.text

    if text in (Command.ADD_WORD, Command.NEXT, Command.DELETE_WORD):
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data.get("target_word")
        translate_word = data.get("translate_word")
        buttons = data.get("buttons", [])

        if not target_word or not translate_word:
            bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ /cards, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")
            return

        if text == target_word:
            hint = show_hint("–û—Ç–ª–∏—á–Ω–æ!‚ù§", show_target(data))
            buttons = [Command.NEXT, Command.ADD_WORD, Command.DELETE_WORD]

        else:
            updated = []
            for btn in buttons:
                if btn == text and not btn.endswith("‚ùå"):
                    updated.append(btn + "‚ùå")

                else:
                    updated.append(btn)
            buttons = updated

            hint = show_hint(
                "–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{translate_word}",
            )

        data["buttons"] = buttons

    markup = build_markup(buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)
